//
//Propósito: Manejar clases, inscripciones y aplicar soft delete.Importaciones: db (de ../utils/firebase).Función createClassInDB(data):Obtiene una nueva referencia: const newClassRef = db.ref(classes/${data.gymId}).push().Define fullData = { ...data, id: newClassRef.key, createdAt: Date.now(), isActive: true }.Usa newClassRef.set(fullData).Devuelve fullData.Función updateClassInDB(gymId, classId, data):Usa db.ref(classes/${gymId}/${classId}).update(data).Devuelve el resultado de getClassDetailsFromDB(gymId, classId).Función getClassDetailsFromDB(gymId, classId):Usa db.ref(classes/${gymId}/${classId}).once('value').Devuelve snapshot.val().Función getClassesByGymFromDB(gymId):Usa db.ref(classes/${gymId}).orderByChild('isActive').equalTo(true).once('value').Devuelve snapshot.val(). (Esto filtra automáticamente las clases archivadas).Función getEnrolledUsersCountFromDB(classId):Usa db.ref(classMembers/${classId}).once('value').Devuelve snapshot.numChildren().Función enrollUserToClassInDB(classId, userId):Define const p1 = db.ref(classMembers/${classId}/${userId}).set(true).Define const p2 = db.ref(userClasses/${userId}/${classId}).set(true).Usa return Promise.all([p1, p2]).Función unenrollUserFromClassInDB(classId, userId):Define const p1 = db.ref(classMembers/${classId}/${userId}).remove().Define const p2 = db.ref(userClasses/${userId}/${classId}).remove().Usa return Promise.all([p1, p2]).Función getUserClassesFromDB(userId):Usa db.ref(userClasses/${userId}).once('value').Devuelve snapshot.val() (será un objeto con IDs de clases como claves: { "classId1": true, "classId2": true }).Exportar: Todas las funciones (createClassInDB, updateClassInDB, getClassDetailsFromDB, getClassesByGymFromDB, getEnrolledUsersCountFromDB, enrollUserToClassInDB, unenrollUserFromClassInDB, getUserClassesFromDB).